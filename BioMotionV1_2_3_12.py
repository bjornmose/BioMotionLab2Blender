# ##### BEGIN GPL LICENSE BLOCK #####
#
#  This program is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License
#  as published by the Free Software Foundation; either version 2
#  of the License, or (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software Foundation,
#  Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
#
# ##### END GPL LICENSE BLOCK #####


#This script implements the BMLwalker developed by the BioMotion Lab 
#(http://www.biomotionlab.ca) . The collection of motion capture data and 
#the development of the algorithm implemented in this script were done by 
#N. Troje. Any publication related to the usage of data and algorithm 
#should cite the following two publications:
#Troje, N. F. (2002) Decomposing biological motion: A framework for 
#analysis and synthesis of human gait patterns. Journal of Vision 2:371-387.
#Troje, N. F. (2008) Retrieving information from human movement patterns. 
#In: Shipley, T. F. and Zacks, J. M. (eds.) Understanding Events: How 
#Humans See, Represent, and Act on Events. Oxford University Press, pp. 308-334.


#
# usage .. see main below for now


import bpy
import math
from math import sin, cos, radians
import mathutils
import bmesh
import numpy as np


_scriptversion = '1_2_2_012'
# blender 2.79
class BioMotionLabGenrator():
 version = _scriptversion
 nopa = 5 #number of principal axis.. used for interpretation of linear walker array  
 dimControl = 3 #number of chanels a conrol stores 
 extra_data = 5 #number of bytes stored at tail  
 nofc       = 0
 
 m_gender = 0
 m_weight = 0
 m_nervous = 0
 m_happy = 0


 raw_data_walker = [-10.7519383725583,-3.72746649802272,-18.3050123531154,-66.5092656924826,44.8271001296432,-14.6283590662005,-63.9261944026256,44.4955713660308,17.7610082741684,14.8045702478553,73.5852924266576,-52.6092814670202,16.9279911020442,75.8694123806675,-52.2857541612207,1.83503092143473,-0.0408307103281587,185.260097750624,220.452431203790,247.761854503159,-182.380575731849,-220.504921772993,-254.264874087117,1.84213422373608,93.4493080518053,73.1623397228417,51.0585903977721,-95.5465213272803,-72.2735735191531,-50.8385897640440,1640.61993723311,1366.67429935860,1406.03752081420,1134.40001920081,915.020745420196,1398.60467189550,1126.90461490174,899.874564579716,1015.02954810020,909.479240979634,525.779863807952,162.948678924057,909.554606761157,522.437972993516,161.727067367829,126.030870377155,-0.0315544948047336,-0.118701655307762,6.00686085567414,18.4233024039577,33.5402189783349,-6.01690993754034,-18.8832547729091,-36.7975908594871,-0.0937279939276836,0.468118059549410,-67.4614091777266,0.421107914862955,-1.24356066032149,66.0585511429529,0.423843495947531,16.7454749227664,13.6539217228521,14.5328751990934,18.7684573831191,13.6120183606257,14.3794935810322,17.6473826923604,10.8915579934451,11.0805683180636,12.7224783591702,-11.5255842263810,-16.8175587375484,12.6801395392263,-11.7514249632538,-16.8625185030921,-0.0446931795675262,-0.0994293926479853,-2.80095151625035,-3.99082840265898,3.68865492657125,2.69286376701449,4.24995528984191,-4.12592626632419,0.116797634556315,6.01637991257057,-0.817529371807220,-55.0021187141497,-6.09574201685782,1.48125881756367,54.8242813403220,1.00000000000000,1.15999007013834,1.26078835523055,-9.76712732911090,-86.5511566058319,-199.180933521128,11.4309821966342,76.7144525104764,176.861540867166,1.62204493236424,8.60677823198452,147.526402445238,323.144939918744,-6.43273887090837,-147.891231503835,-321.784267330297,5.16274050080685,-0.398924078714643,0.882958953137815,-24.4360030065937,-7.11745613579471,0.481319700750004,-21.0133378152143,1.77223262085729,-4.87628414766496,-0.633132212672480,-5.35374117803311,3.18640496961934,-0.136085894756350,-5.55010720754465,3.03219992822588,0.377783128968927,0.523533762551166,-5.32786804552820,6.58549384575466,-52.0673097103806,4.73174986791646,-4.23105153891354,44.5907633662091,0.407880510831181,2.39120923728384,21.1255826430030,-38.2148554176900,-1.93766107878406,-20.9721213831963,39.0862916731996,11.3013841635330,5.04640285684089,9.71946135141663,9.25626338717648,3.64729362215822,0.0700719429418479,9.17415638022784,4.76155544730385,0.102858838066234,14.0190823730271,14.2286897104068,24.4423479977219,-51.2163900094269,14.1930646962749,23.7375872303515,-51.2265471911567,-0.0265949366786581,0.0957151351921562,0.506135566846348,-2.02561787621297,-0.423397734385468,-0.313174726163348,2.24979258910326,-0.0895739290407124,0.0926628592474168,0.177416583858108,3.62804769914316,1.78888648476427,-0.0788364487021580,-3.19918146696128,-1.21382605488544,-2.71924845380677,-3.00211552243835,-3.46227500731415,-5.26659510583453,-11.3157159876224,-3.57804177664794,-5.56430046666801,-12.2629740938751,-3.36532602257169,-4.29417223471535,-13.5520258267399,29.3832084459500,-4.13017568253990,-13.1585043782278,29.6272299664470,0,-0.777824905615585,0.182070540329547,-0.278404491253913,-1.35785980306747,-3.24726391201266,-0.255471828513151,-1.53725883755556,-1.42943693534243,0.308319043161399,-0.532155748157143,-32.1122567706563,10.3292802194032,-0.757355235478753,-31.7039678396603,9.75722739516707,0.239342886057222,0.163386401005694,-0.401825656431265,-1.47644247178224,-3.50005944216109,0.528436071183135,0.544743848609864,2.94088431372796,-0.0276764628803989,-0.475230047571613,-5.61931807680189,-2.53154309467233,0.828885510797054,5.17935392270239,2.78710739229904,-20.8947287998807,-20.8939662029067,-20.3444569419913,-12.9698826053941,6.30000946494167,-20.5875476344584,-14.9628168085916,1.15301838637891,-20.8148027436241,-19.2140457117746,-12.5655072751523,-12.3469483614373,-19.5073676186566,-12.3840671623013,-11.9400529481596,0]
 raw_data_gender = [10.8622752381147,3.87784584606416,5.81610639589812,6.21443625253467,5.83704977209561,2.11678183662724,1.49714860432717,-1.43213334066785,-1.91706656439971,-3.72546660926233,-8.94743501326057,-7.44419476778238,-2.04255576084045,-6.47292434448537,-3.02146495825412,-0.417454129969832,-0.798845997309115,2.82525302328378,6.58162644614628,-0.148832074967619,-1.84484635406154,-4.12252915058675,-1.94274385563284,-0.179945745256845,-5.42786810376125,6.61359097522899,4.74160125623491,4.41358440819388,-5.65166311371472,-5.06421007401757,0.598322945574293,-0.820230066738596,-0.288438984967801,2.29854763807429,-1.63880607082610,2.49171588822723,3.18813757393736,-0.269932661912225,-4.07022663674413,-4.45065592489224,-2.26457871895647,-2.03545888478734,-4.61250609379555,-1.57025083258372,-3.33951608607358,-0.890102321103325,-0.402762082211773,-0.128556275080697,1.35165566708685,0.905946351327807,-1.34989771290742,-1.25864754217404,-0.488282114614113,-0.294928030194923,-0.283981468159997,-0.123537123697021,2.30011938880963,-0.232967075056555,-0.220699834686512,-1.35431666065644,-0.226201187974979,5.01816863098923,3.20435623460813,3.52937917607227,1.98043163108843,-0.915019105616344,3.57100598250043,1.63176896974632,-1.81143127934604,-0.162180926939796,-1.48626023336591,-2.60187027300432,-0.196709668879124,-1.71093187827240,-1.90568325360115,0.535403613052698,0.0901824012716346,0.0524919475696138,-1.36006446624041,-1.16319423900141,-3.51467872190662,1.50972693906794,1.51559887246235,2.38117514464405,0.0586190380116436,-1.65020885405940,-2.56877524386008,-0.681646248375902,1.79415406773476,2.55189796883159,0.798639246422816,0.0342073952011560,1.15488854259564,0.960084447169126,1.29851053128949,8.45024532563756,11.0933900174813,0.280595535064710,-13.1683484900773,-24.1008007959739,0.457009867183980,-0.479447515302096,-2.97465383332396,-4.05784844879388,1.05787157230132,3.59222567449265,4.15488552561069,3.00122757985203,0.995404541731690,1.33262098055273,-0.372571965865527,-0.340172974556166,0.784358902477489,-1.53464865930626,-4.07734571303003,-0.665648010096331,-1.09303601955504,-0.343578388044959,-0.251992564247704,-1.09242107685912,-0.369292142338945,-0.254006836131887,0.0620042041969407,0.0650215571538668,-1.70609335744371,-4.11258434681737,-2.63067838867320,1.53500379640007,5.26425082704958,0.0693151728968716,-0.0164941273287836,-0.331333382214125,-2.95744608658914,-2.13269659787131,0.152728151387196,2.28000378138170,0.495487888148287,0.348889753128268,0.860562851303457,-0.458459262279532,-0.237364049203899,-0.969514077111766,-0.359513799512138,-0.314487119618581,0.329331713056543,-0.976017531423067,-1.62704716356786,-1.47765225775260,2.13056938155009,1.83213270975978,-1.50885485909265,2.14432301974271,0.913484972312960,-0.206929440012976,-0.149737211730722,-0.160340393583336,0.144735532814098,0.456130276764025,-0.152337041262232,0.308872719191424,-0.219120951283475,-0.0853454544483000,-0.0609392086290274,1.54754814655687,0.384075693399170,-0.0712697028604292,-1.05717837191362,-0.427410775230718,-0.186397660789509,-0.154535028531196,-0.257416564945914,0.0430665402500267,1.00940635971217,-0.415781811762337,-0.243009913716927,-0.573726184448932,-0.161083943571017,-0.233021971341002,2.21418356717105,1.39459855774077,-0.258015432420134,1.69911202146683,0.719444880104572,0,0.759222556825001,0.355377914840419,0.350389579303012,-0.378836967820307,0.391484015256617,0.356800687145738,-0.472458438803077,1.71123777308700,-0.248022688099012,-0.343681089584835,1.36333479269400,-0.00688332913096112,-0.514873392435611,0.989338333784138,-0.473495990686217,0.214444962331612,0.0984704690342841,0.0932359735989069,1.09235313570833,0.601150889063367,0.0603905381227588,-1.58671583868713,-1.22579785374803,0.136425152562608,0.217264516198061,-0.224902540534402,0.696001935119537,0.197857676179030,0.334992043182422,-1.08244415827362,-0.766276468753209,-0.558612770425893,-0.644804949095056,-1.38639582091282,-1.83840514515086,-0.618216899068877,-2.09949848827496,-4.24165287036390,-0.802355169400983,-0.907789808909513,-1.47975979262350,-0.368112278367834,-0.853663038196210,-1.65467916345065,-0.309272020540577,0]
 raw_data_weight = [6.97299621415639,1.72189688314990,4.00116806104000,6.10707274123270,3.81858132884442,-0.268416765573978,1.19214998023137,-0.830596370685391,-4.57464307666308,-5.04426464645415,-6.56087523630632,-2.13878290486604,-3.99386527580026,-2.95279544033096,2.30469965522041,0.829131576281622,-0.182465050390084,6.61301042155943,11.1400450072438,4.93783232364958,-2.82560234106618,-8.33929764276059,-8.25580531069052,-0.511583674572577,-1.77246842956280,6.56760262245357,4.45940951121577,0.0436265912901885,-7.01800497480072,-4.86461062728133,0.692777396324720,-0.429308290326574,-4.12915955958107,-2.76211480275548,-11.7896071567878,1.97710198238211,1.59189493710886,-5.27618624215229,2.01507106403492,1.25721587687820,1.89576722637022,-1.18718130634912,0.783762453557088,2.33077609970562,-2.08556421541997,1.65443384191452,-0.284177865890921,-0.307880945212011,0.741008473152660,1.80488758989290,2.79026223348795,-0.928768259893477,-1.09061224313465,-1.86103691062546,-0.474386266229603,-0.599027572240181,-0.131999401956304,0.287307917722563,-0.0670101495855125,0.00896927367605011,0.277842064987697,5.03204757475160,3.65611488637004,3.74984414564515,2.78460615160825,-0.128834597935228,3.87434216313824,2.07895540809584,-1.27081982875701,1.11409672852596,-0.286878928602604,-3.97100714031985,0.0946555345136001,-0.485276809173718,-4.02710006464691,0.0917992378488982,-0.406323590366951,-0.404436568602862,-1.46238291691054,-1.41132538297127,-1.91609284976068,0.711581580034461,0.690449727984842,0.730042780019879,-0.392225525368213,-1.70465215076560,-2.08840409082975,-0.925502314678826,1.00055700433652,1.61455261589967,0.00139385543398584,0.0249934715532956,0.915290991009979,0.799556948888455,-0.610419570674130,10.7297756435775,21.9610830606342,1.64270534537721,-15.3593083493078,-33.9400060368888,0.510977197718852,-1.42155882555786,-5.91704698638637,-6.60968547633760,2.00137305200595,6.69098691102027,6.55735122622332,3.07675133640677,0.676864489409231,0.617176162944806,0.241184064982093,-0.528538496724659,0.425653099211833,-0.0494603868862923,-1.61861506437554,-1.23132713775047,-2.15115853599750,-1.49437822980622,0.881092402991114,-2.05264183101797,-1.26084986399983,0.863316463762191,0.250113895409253,0.258765015460939,-1.62459210493689,-5.14253674874301,3.01590549974751,1.90501829186223,6.81016066940256,-3.02833164954041,0.211804449313463,-0.810766845345401,-2.30790729836272,0.304196739002919,0.815984400982323,1.20251493098481,-1.52319503135871,-0.110789323392909,0.874605033090273,-0.160399100764902,0.275322675735931,-0.373782504167636,-1.54314749717798,-0.00212464090842130,0.777815803148431,-1.70543570350152,-1.20710437614149,-1.06106243251343,1.28716440117744,1.36590612545544,-1.20085885270229,1.46782601577748,0.412124064768843,-0.209521780225730,-0.122381282694437,-0.103238913620229,-0.368438878891511,-0.00210197519969172,-0.143961470338356,0.948862574469089,-0.0194106356658378,0.00121465221571525,0.0186595049768949,2.88209809400605,-0.386749940868710,0.0141446576434566,-2.51566424628623,0.252685364554666,0.625608061336289,0.743788400484531,0.695324050091464,0.808476712546070,0.393887010232219,0.542160162587085,0.523135329385399,-0.291976975785362,0.757514863401118,0.658167319287741,1.70886684435368,0.435468190313219,0.646634119317645,1.50270206001917,0.211587284005638,0,0.174544483077777,-0.134541187224014,-0.493417437053271,-0.427870489583540,2.12312557729633,-0.158753020771751,-0.565257005236023,2.25514180645062,-0.284802375843194,-0.501006106450945,0.156942947954861,-0.333951860489493,-0.501310453505449,0.173273763931561,-1.32396054167176,0.0925107211063163,-0.0221514391649526,-0.0486762668096691,0.754014131012353,1.01536790259703,0.00524670730159950,-0.970218490451367,-1.15687373890217,0.0439259070790155,0.141920967761661,-1.55567463918627,0.318258726020781,0.00968710036689885,1.71054721032283,-0.502435202784555,-0.337853083008773,-0.214414103461054,-0.506198264461075,-2.48500922442769,-5.51162729496113,-0.350321585851870,-2.75329907294353,-6.91080614295055,-0.354864812038586,-0.339649036994719,-1.29883474308811,-0.951573661814865,-0.312504590429329,-1.56377712563378,-0.540502498785656,0]
 raw_data_nervous = [-1.06134214936967,-0.821038780608398,-2.27151441143312,-0.593565638449432,2.93529552325287,-1.33716107202864,-0.437799139056454,1.39315557637054,5.26045030868429,4.21640093162900,-1.83139690735865,-2.60311633252444,4.78972959062178,-2.94856705949575,-3.79651842329953,-3.16035238456531,-0.633096840842578,-5.50283759281812,-10.2053949458941,-6.01263603622674,1.31746628590561,7.43106534196106,8.40797620289240,1.43748507324748,-4.78735211536714,-0.303214042954494,-0.591358062801913,6.98135383509831,2.62513811978090,1.80628989415596,-0.391582099612247,0.859295572751745,4.26667817752415,2.19973363551719,5.33088905521230,0.978507802359325,-0.317106194857896,2.38175273947003,-1.43084572449385,-1.12452642346372,0.0202955321207460,1.42961536253810,-0.971063629103679,-0.234790139961677,1.09706478404349,-2.04592287630435,0.161702855898008,0.209873095989063,0.940042834774787,-1.58397405071598,-3.83484150818307,-0.430078424020539,0.658443935707803,2.02968185814469,0.258454171257769,0.628430175617600,1.22998245659434,-0.230167139816054,-0.187133032466676,-0.402476170628764,-0.209236375205972,-1.13095577617721,-1.22757881577091,-0.800697769751030,-1.51541133062348,-2.11525019149256,-0.969269039140664,-1.58021344552275,-1.69685082789706,-1.83699634496252,-1.54560566897040,1.57349794265142,-1.06462384896016,-1.54413498472799,2.03341480657565,-0.0779467754450322,0.719377177917966,0.695014435964701,0.414676470948341,0.409711570968704,-0.776132752416733,0.938287496835651,0.858069136413204,1.75426379612720,0.806852599236384,0.585877529786500,-0.223330045395666,0.0700935484862716,0.809545416976990,0.970059506373670,1.17377874486561,0.00984590751124198,-0.780097462456516,-1.04810847768246,0.704087338222903,1.57436002781137,0.239039937796580,-2.23618704170304,6.06536951548378,16.3461216527456,-1.20265850888108,-0.603438039103126,6.32204759639174,8.81922596392519,-1.29856947809224,-7.69724869483900,-9.57419732086183,-0.819813154535591,-0.284437229112271,-0.409318199878129,1.70113869450340,5.05726122947656,-0.244429584235525,-1.81752761389596,-1.76589979619772,0.0296233453962378,0.739665175028464,1.23198773950072,-1.40127326621171,0.508947546539532,0.679067128601969,-1.55619297358838,-0.278740636586653,-0.285283992920952,0.979473369184270,0.996158147665990,-1.96691001054940,-0.967916599142269,-2.48607673496535,3.49537067640558,-0.191282643176755,0.861337763251095,-0.685075913108261,-2.13236444185843,-0.873548506222734,1.25569996725071,2.46754745934566,0.639820846893045,0.412069649448423,0.423534356721506,0.350110040189503,0.104867610894097,0.113549767403305,0.684163582968230,-0.467117708008352,0.367934771152160,-0.169070194164941,-0.294958490296879,1.06796077407279,-0.0736841099809189,-0.223612101436305,0.930196456219768,0.0225392993780222,0.0293494433888838,0.103041864223317,0.0273325178448019,0.185191487891226,-0.249388169829512,0.135541941741626,-0.726810562638768,-0.00448783698646718,0.0874674133957658,0.0649640109035993,-1.80424820788310,1.32093043115957,0.0202687714972991,1.78958724266173,-0.846997007576950,-0.0925658270619998,-0.0788152875532167,0.124484552985266,0.724718214239617,1.36552917021726,0.00721605454420758,0.445223939572294,0.971962042890638,-0.108231672240419,-0.151360484766453,0.845591134862157,1.24514744498474,-0.0540587209079670,0.674744020690578,1.21411602274649,0,0.633830202852485,0.405687037937141,0.852870383609653,0.764746772553977,-0.234576842828537,0.564278646541937,0.818416908207558,-0.775399151379683,0.00519682937503137,0.111623813244096,1.20427831753507,0.539777610554792,0.0838125825043143,0.863264328171340,0.818817936756374,0.0343740129308371,0.0313595211945457,0.165167295995801,0.236881757879614,0.00875266908666569,-0.0306214205847926,-0.433490659394707,0.0549668810209340,0.117746913133204,0.133988087299825,1.26973946515426,-0.308799353710004,0.171112312636177,-1.38730189623652,0.00880229518182191,-1.62190698749134,-1.51648465762347,-1.54617869099541,-1.55634564987154,-1.23766082442805,-1.52348249597379,-0.161101969138227,2.06589224421612,-1.65251027593313,-1.71384324479092,-0.646686903029649,0.745340754628214,-1.69118759252628,-0.557633517711684,0.534529525418636,0]
 raw_data_happy = [-8.67936588878631,-1.77470245537804,-1.18751015657594,6.94531965680805,10.7767496733696,-1.90863608921144,1.67467917928432,3.20536201187721,3.12533270877762,2.61261849183137,-4.40408148692059,-5.23105649562649,2.58653575344997,-1.20800067939035,-4.62463605802602,-0.613192839358591,-0.741563864405404,1.47532578154490,3.89770857479134,-2.03905002991520,-0.448578604871460,-0.109839026417164,2.13462820728521,-0.582811854290814,-1.82640460214104,0.119458894609563,0.0345706593499117,0.00425916244695979,-1.26633058986535,-1.61782978494722,-0.568278681079755,-2.82625700056293,0.270314906542053,2.58563758398263,10.7121390896010,0.972346341810508,0.550704806395093,6.10245595447436,-5.62467319375856,-5.30910999783367,-2.21484648216347,-0.280874288087182,-5.19620783902520,-1.14250039522565,-0.791796008367926,-1.50815351494611,0.280243807773588,0.496187765459352,0.682658795831437,-0.407039529668396,-4.94826636303926,0.417394532214768,-0.473791566501139,-2.54212574327376,0.261982014725729,0.256193496399709,1.46591872357010,-0.561498894466981,0.289352410237297,-1.33817904180304,-0.542686082537714,-1.86690856950223,-1.02534103859956,-1.30512185232508,0.133316981029901,2.19671163836645,-1.26706710580040,1.25068783029663,2.41501811225300,0.736731187615478,1.17510306702708,1.11641022479306,0.644805137455988,1.15833598873252,0.766701381601594,0.830401383345398,-0.618850515231332,-0.588419580626163,0.372098323371929,1.74903415556030,0.216440107212392,-1.55703797180938,-1.80342382028984,-3.30651842858017,-0.638301707562216,-0.670680807342366,-0.574103983515675,-1.22317042542935,-0.709367364153190,-1.13847960740569,0.592040216433788,-0.00787424872913969,0.712679450718906,0.890160487122128,0.601817534071266,-18.1349631868141,-39.0922711111479,0.578233237549983,10.6681635221294,24.8063534919807,1.20193476421449,2.55724620244024,9.04817727135562,11.4800542661616,-0.489614394420212,-7.92381489033509,-10.4566147846982,1.15116637958407,0.268155147759027,0.969303262017889,-3.54383876731072,-2.98100760728623,0.678614076192702,-3.22650752391888,-3.13092500577596,-0.0806332361694298,0.613690036686420,0.786451280806993,0.516630927723573,0.670424154710942,0.549160978108053,0.659271511943097,0.177183592781629,0.238430582486473,-1.27127365068321,-0.439829028177578,-15.1839676110333,1.20887758879446,0.888022234531706,10.1599175420777,0.230989862101136,1.45654936196586,-0.194073354355243,-1.62903404600603,-1.11752401560117,-1.21198478602807,1.21608129947165,0.434817467645872,0.0625422346396714,0.767766908270415,0.555920084952942,-0.784739218489201,0.971834560945984,0.468116248182157,0.875791124794872,1.11769327641794,0.722758040691246,0.788749585498572,1.03220856284935,-1.62897875904468,0.642378378192619,0.522689038128033,-1.82103744640400,0.0436260639640601,-0.0656473812323784,0.0797076832179325,-0.541428082138210,-0.155784015204422,-0.196164270152897,0.580045729777791,-0.360384153986323,-0.173895654939426,-0.162947959686220,-0.292990248566835,-0.174479854044395,-0.205110911127164,0.348717945763189,0.191679582122295,-1.30997464548692,-1.34588838862899,-1.51378451333720,-2.15008601135697,-0.983298879582978,-1.54143920698679,-2.37871093688983,-3.34630196042493,-1.29425179114999,-1.25312777899680,-0.601900447668386,0.422790145349287,-1.26464104134886,-1.38072558413636,0.400187519435249,0,0.126416027278664,0.179192426609648,0.175455783088409,-0.954181052745561,-3.72396436244391,0.114153460280855,-0.658244516509201,-1.21856020482756,0.0947023873735165,0.264872989950778,0.146230722951919,0.220576017536802,0.0359813578909282,-0.476828177024455,0.473305082814922,0.0990960881947890,0.117828822261742,-0.131561547525478,-0.106412717800651,-1.30759384210636,0.179265102163249,0.262159213746548,0.832194705999021,-0.0693396571401364,-0.0912643536816610,0.698248797365811,0.765485124817114,0.0860620755700431,-0.475323349010275,-0.542620052934527,-2.39800635222299,-2.30951983917581,-1.90438780086646,1.50915275065126,8.40709237300455,-2.16502170624317,-0.454413846581429,4.05325917758766,-2.20709435387091,-2.14689325778949,-0.614575206540114,0.200699436811318,-2.29906998148526,-0.444447683989184,-0.426738622889804,0]
 raw_data_names = ['head','neck','shoulder_L','ellbow_L','hand_L', 'shoulder_R','ellbow_R','hand_R','hip_torus','hip_L','knee_L','foot_L','hip_R','knee_R','foot_R','hip_target','chest_target']
 
 def nof_contols(self,ob):
     s=len(ob)
     return ((s-self.extra_data)/self.nopa )/self.dimControl
 
 def calculate_once(self,ob):
     self.nofc = int(self.nof_contols(self.raw_data_walker))
     msg = 'C1_nofc {:}'.format(self.nofc)
     print(msg)
 
 def pick_vector(self,ob,pa,nc):
      #just in case things might change
      #nofc = self.nof_contols(self.raw_data_walker)
     nofc = self.nofc
     v = [0,0,0]
      #just a litte weird order here 
      #reverse enginering here i+(this.nummarkers*3+1)*2
      #say the 3 is self.dimControl the 2 is pa
     ix = nc+         (nofc*self.dimControl+1)*pa
     iy = nc+1*nofc + (nofc*self.dimControl+1)*pa
     iz = nc+2*nofc + (nofc*self.dimControl+1)*pa
     
     v[0]=ob[ix]
     v[1]=ob[iy]
     v[2]=ob[iz]
       #msg = 'PV Index x{:} y{:} z{:}'.format(ix,iy,iz)
       #print(msg)
     return(v) 
 
 def build_control_at(self,nc,time):
 #plain python 
     pos_result = [0,0,0]
     pos_accu = [0,0,0]
     omega = 2*math.pi
     # order zero
     # PA == 0
     pos_result = self.pick_vector(g.raw_data_walker,0,nc) 
     #base frequency
     #add first order motion

     # PA == 1 order sin(omega*time)
     f = sin(omega*time)
     pos_accu  = g.pick_vector(g.raw_data_walker,1,nc)
     #this can be done nicer using numpy
     pos_accu[0] *= f;  pos_accu[1] *= f; pos_accu[2] *= f
     pos_result[0] += pos_accu[0]; pos_result[1] += pos_accu[1]; pos_result[2] += pos_accu[2];
     # PA == 2 order cos(omega*time)
     f = cos(omega*time)
     pos_accu  = g.pick_vector(g.raw_data_walker,2,nc)
     pos_accu[0] *= f;  pos_accu[1] *= f; pos_accu[2] *= f
     pos_result[0] += pos_accu[0]; pos_result[1] += pos_accu[1]; pos_result[2] += pos_accu[2];

     # PA == 3 order sin(2*omega*time)
     f = sin(2*omega*time)
     pos_accu  = g.pick_vector(g.raw_data_walker,3,nc)
     pos_accu[0] *= f;  pos_accu[1] *= f; pos_accu[2] *= f
     pos_result[0] += pos_accu[0]; pos_result[1] += pos_accu[1]; pos_result[2] += pos_accu[2];
     # PA == 4 order cos(2*omega*time)
     f = cos(2*omega*time)
     pos_accu  = g.pick_vector(g.raw_data_walker,4,nc)
     pos_accu[0] *= f;  pos_accu[1] *= f; pos_accu[2] *= f
     pos_result[0] += pos_accu[0]; pos_result[1] += pos_accu[1]; pos_result[2] += pos_accu[2];     
 
     return (pos_result)
 
 #using numpy with gender channel
 def build_control_sex_at(self,nc,g,time):
    pos_result = np.array([0,0,0])
    pos_accu   = np.array([0,0,0])
    omega = 2*math.pi
    
    a = np.array(self.pick_vector(self.raw_data_walker,0,nc))
    b = np.array(self.pick_vector(self.raw_data_gender,0,nc))
    pos_result = a + b*g;
    
    # PA == 1 order sin(omega*time)
    f = sin(omega*time)
    a = np.array(self.pick_vector(self.raw_data_walker,1,nc))
    b = np.array(self.pick_vector(self.raw_data_gender,1,nc))
    pos_result =pos_result + (a + b*g)*f;
    
    # PA == 2 order cos(omega*time)
    f = cos(omega*time)
    a = np.array(self.pick_vector(self.raw_data_walker,2,nc))
    b = np.array(self.pick_vector(self.raw_data_gender,2,nc))
    pos_result =pos_result + (a + b*g)*f;

    # PA == 3 order sin(2*omega*time)
    f = sin(2*omega*time)
    a = np.array(self.pick_vector(self.raw_data_walker,3,nc))
    b = np.array(self.pick_vector(self.raw_data_gender,3,nc))
    pos_result =pos_result + (a + b*g)*f;
    
    # PA == 4 order cos(2*omega*time)
    f = cos(2*omega*time)
    a = np.array(self.pick_vector(self.raw_data_walker,4,nc))
    b = np.array(self.pick_vector(self.raw_data_gender,4,nc))
    pos_result =pos_result + (a + b*g)*f;
    return (pos_result)


 # complete walker
 def build_control_all_at(self,nc,g,w,n,h,time):
    pos_result = np.array([0,0,0])
    pos_accu   = np.array([0,0,0])
    omega = 2*math.pi
    
    a = np.array(self.pick_vector(self.raw_data_walker,0,nc))
    b1 = np.array(self.pick_vector(self.raw_data_gender,0,nc))
    b2 = np.array(self.pick_vector(self.raw_data_weight,0,nc))
    b3 = np.array(self.pick_vector(self.raw_data_nervous,0,nc))
    b4 = np.array(self.pick_vector(self.raw_data_happy,0,nc))
    pos_result = a + b1*g + b2 * w + b3 * n + b4 *h;
    
    # PA == 1 order sin(omega*time)
    f = sin(omega*time)
    a = np.array(self.pick_vector(self.raw_data_walker,1,nc))
    b1 = np.array(self.pick_vector(self.raw_data_gender,1,nc))
    b2 = np.array(self.pick_vector(self.raw_data_weight,1,nc))
    b3 = np.array(self.pick_vector(self.raw_data_nervous,1,nc))
    b4 = np.array(self.pick_vector(self.raw_data_happy,1,nc))
    pos_result =pos_result + (a + b1*g + b2*w + b3*n + b4*h)*f;
    
    # PA == 2 order cos(omega*time)
    f = cos(omega*time)
    a = np.array(self.pick_vector(self.raw_data_walker,2,nc))
    b1 = np.array(self.pick_vector(self.raw_data_gender,2,nc))
    b2 = np.array(self.pick_vector(self.raw_data_weight,2,nc))
    b3 = np.array(self.pick_vector(self.raw_data_nervous,2,nc))
    b4 = np.array(self.pick_vector(self.raw_data_happy,2,nc))
    pos_result =pos_result + (a + b1*g + b2*w + b3*n + b4*h)*f;

    # PA == 3 order sin(2*omega*time)
    f = sin(2*omega*time)
    a = np.array(self.pick_vector(self.raw_data_walker,3,nc))
    b1 = np.array(self.pick_vector(self.raw_data_gender,3,nc))
    b2 = np.array(self.pick_vector(self.raw_data_weight,3,nc))
    b3 = np.array(self.pick_vector(self.raw_data_nervous,3,nc))
    b4 = np.array(self.pick_vector(self.raw_data_happy,4,nc))
    pos_result =pos_result + (a + b1*g + b2*w + b3*n + b4*h)*f;

     
    # PA == 4 order cos(2*omega*time)
    f = cos(2*omega*time)
    a = np.array(self.pick_vector(self.raw_data_walker,4,nc))
    b1 = np.array(self.pick_vector(self.raw_data_gender,4,nc))
    b2 = np.array(self.pick_vector(self.raw_data_weight,4,nc))
    b3 = np.array(self.pick_vector(self.raw_data_nervous,4,nc))
    b4 = np.array(self.pick_vector(self.raw_data_happy,4,nc))
    pos_result =pos_result + (a + b1*g + b2*w + b3*n + b4*h)*f;
    return (pos_result)    

    
 
 def Get_Speed(self):
  speed = self.raw_data_walker[self.nofc*3]
  speed += self.m_gender  * self.raw_data_gender[self.nofc*3]
  speed += self.m_weight  * self.raw_data_weight[self.nofc*3]
  speed += self.m_nervous * self.raw_data_nervous[self.nofc*3]
  speed += self.m_happy   * self.raw_data_happy[self.nofc*3]
  return (speed)

#end of class BioMotionLabGenrator
    

# some ugly globals to get it working in blender quick and dirty    
number_of_frames = 40
#data looks like mm [SI]
copy_scale = 0.001

def build_by_name(name,id):
 bpy.ops.object.select_all(action='DESELECT')
 obj = bpy.data.objects.get(name)
 Control_ID=id
 obj.select = True
 bpy.context.scene.objects.active = obj
 for i in range(number_of_frames):
  bpy.context.scene.frame_set(i)
  v = g.build_control_at(Control_ID,i/number_of_frames)
  obj.location[0] = v[0]*copy_scale
  obj.location[1] = v[1]*copy_scale
  obj.location[2] = v[2]*copy_scale
  bpy.ops.anim.keyframe_insert()
  
def build_sex_by_name(ob,name,id,g):
 bpy.ops.object.select_all(action='DESELECT')
 obj = bpy.data.objects.get(name)
 Control_ID=id
 obj.select = True
 bpy.context.scene.objects.active = obj
 for i in range(number_of_frames):
  bpy.context.scene.frame_set(i)
  v = ob.build_control_sex_at(Control_ID,g,i/number_of_frames)
  obj.location[0] = v[0]*copy_scale
  obj.location[1] = v[1]*copy_scale
  obj.location[2] = v[2]*copy_scale
  bpy.ops.anim.keyframe_insert()


def build_all_by_name(ob,name,id,g,w,n,h):
 bpy.ops.object.select_all(action='DESELECT')
 obj = bpy.data.objects.get(name)
 Control_ID=id
 obj.select = True
 bpy.context.scene.objects.active = obj
 for i in range(number_of_frames):
  bpy.context.scene.frame_set(i)
  v = ob.build_control_all_at(Control_ID,g,w,n,h,i/number_of_frames)
  obj.location[0] = v[0]*copy_scale
  obj.location[1] = v[1]*copy_scale
  obj.location[2] = v[2]*copy_scale
  bpy.ops.anim.keyframe_insert()
  

def Build_all_by_name(ob,name,id):
 bpy.ops.object.select_all(action='DESELECT')
 obj = bpy.data.objects.get(name)
 Control_ID=id
 obj.select = True
 bpy.context.scene.objects.active = obj
 for i in range(number_of_frames):
  bpy.context.scene.frame_set(i)
  v = ob.build_control_all_at(Control_ID,ob.m_gender,ob.m_weight,ob.m_nervous,ob.m_happy,i/number_of_frames)
  obj.location[0] = v[0]*copy_scale
  obj.location[1] = v[1]*copy_scale
  obj.location[2] = v[2]*copy_scale
  bpy.ops.anim.keyframe_insert()

def Build_Extra_Hip(ob,tn):
 bpy.ops.object.select_all(action='DESELECT')
 
 OName ='{:}{:}'.format(tn,ob.raw_data_names[bmg.nofc])
 print(OName)
 tobj = bpy.data.objects.get(OName)
 
 OName ='{:}{:}'.format(tn,ob.raw_data_names[8])
 print(OName)
 s1obj = bpy.data.objects.get(OName)
 
 OName ='{:}{:}'.format(tn,ob.raw_data_names[9])
 print(OName)
 s2obj = bpy.data.objects.get(OName)
 
 OName ='{:}{:}'.format(tn,ob.raw_data_names[12])
 print(OName)
 s3obj = bpy.data.objects.get(OName)

 
 bpy.context.scene.objects.active = tobj
 tobj.select = True
 for i in range(number_of_frames):
  bpy.context.scene.frame_set(i)
  v1 = np.array(s1obj.location)
  v2 = np.array(s2obj.location)
  v3 = np.array(s3obj.location)
  tv = np.cross(v3-v1,v2-v1)
  tv = tv / math.sqrt(np.dot(tv,tv)) 
  print(tv)
  tobj.location= tv
  tobj.parent = s1obj
  bpy.ops.anim.keyframe_insert()

# raw_data_names = ['head','neck','shoulder_L','ellbow_L','hand_L', 'shoulder_R','ellbow_R','hand_R','hip_torus','hip_L','knee_L','foot_L','hip_R','knee_R','foot_R','hip_target','chest_target']   
def Build_Extra_Chest(ob,tn):
 bpy.ops.object.select_all(action='DESELECT')
 
 OName ='{:}{:}'.format(tn,ob.raw_data_names[bmg.nofc+1])
 print(OName)
 tobj = bpy.data.objects.get(OName)
 
 OName ='{:}{:}'.format(tn,ob.raw_data_names[8])
 print(OName)
 s1obj = bpy.data.objects.get(OName)
 
 OName ='{:}{:}'.format(tn,ob.raw_data_names[5])
 print(OName)
 s2obj = bpy.data.objects.get(OName)
 
 OName ='{:}{:}'.format(tn,ob.raw_data_names[2])
 print(OName)
 s3obj = bpy.data.objects.get(OName)

 
 bpy.context.scene.objects.active = tobj
 tobj.select = True
 for i in range(number_of_frames):
  bpy.context.scene.frame_set(i)
  v1 = np.array(s1obj.location)
  v2 = np.array(s2obj.location)
  v3 = np.array(s3obj.location)
  tv = np.cross(v3-v1,v2-v1)
  tv = tv / math.sqrt(np.dot(tv,tv)) 
#  print(tv)
  tobj.location= tv
  tobj.parent = s1obj
  bpy.ops.anim.keyframe_insert()
  

 
# end ugly globals    

# usage .. here you are    
# main
print('BioMotionLabGenrator , create bmg')     
bmg=BioMotionLabGenrator()
#initialize g object
bmg.calculate_once(bmg.raw_data_walker)

#Begin Control Panel :)
#range [-6..6]
bmg.m_gender = 0
bmg.m_weight = 0
bmg.m_nervous = 0
bmg.m_happy = 0
TargetName = 'Empty.'
RootName = 'WalkerRoot'
#something like 5 cm [SI] 
w_empty_draw_size = copy_scale * 50 
w_empty_draw_type = 'SPHERE'
#creates root 'WalkerRoot' and children
#Empty.hip_torus gets extra children
#Keyframes are set to Location
#animation runs from 0 to 39
#well on blender 2.79 you can keep the animation running (alt+a) .. modify above parameters .. run the script
#even without stopping the animation it rebuilds the actions so you can explore the walker interactively
#End Control Panel :)

speed = bmg.Get_Speed()
#this is pretty much a wild guess .. but looks ok
l_fps = 30*125/speed
bpy.context.scene.render.fps = l_fps
print(speed)


bpy.ops.object.select_all(action='DESELECT')
#create empty objects if no objects exist
#create proot first
proot = bpy.data.objects.get(RootName)
if (not proot):
 proot = bpy.data.objects.new(RootName, None )
 proot.empty_draw_size = w_empty_draw_size *2
 proot.empty_draw_type = 'CUBE'
 bpy.context.scene.objects.link( proot )

#create primary motion vectors
for n in range(bmg.nofc):
 OName ='{:}{:}'.format(TargetName,bmg.raw_data_names[n])
 #print(OName)
 obj = bpy.data.objects.get(OName)
 if (not obj):
  print('Create {:}'.format(OName))
  obj = bpy.data.objects.new( OName, None )
  bpy.context.scene.objects.link( obj )
  obj.empty_draw_size = w_empty_draw_size
  obj.empty_draw_type = w_empty_draw_type
  if (proot):
   obj.parent = proot
   
   
#build some extra contols   
if (1):
 OName ='{:}{:}'.format(TargetName,bmg.raw_data_names[bmg.nofc])
 print(OName)
 obj = bpy.data.objects.get(OName)
 if (not obj):
  print('Create {:}'.format(OName))
  obj = bpy.data.objects.new( OName, None )
  bpy.context.scene.objects.link( obj )
  obj.empty_draw_size = w_empty_draw_size
  obj.empty_draw_type = 'ARROWS'
  if (proot):
   obj.parent = proot
 OName ='{:}{:}'.format(TargetName,bmg.raw_data_names[bmg.nofc+1])
 print(OName)
 obj = bpy.data.objects.get(OName)
 if (not obj):
  print('Create {:}'.format(OName))
  obj = bpy.data.objects.new( OName, None )
  bpy.context.scene.objects.link( obj )
  obj.empty_draw_size = w_empty_draw_size
  obj.empty_draw_type = 'ARROWS'
  if (proot):
   obj.parent = proot

   


#fill actions
for n in range(bmg.nofc):
 OName = '{:}{:}'.format(TargetName,bmg.raw_data_names[n])
 print(OName)
 obj = bpy.data.objects.get(OName)
 if (not obj):
  OName = 'Fail {:}{:3}'.format(OName,n)
  print(OName)
 obj = bpy.data.objects.get(OName)  
 if (obj):
  Build_all_by_name(bmg,OName,n)

#fill actions on Extras  
Build_Extra_Hip(bmg,TargetName)
Build_Extra_Chest(bmg,TargetName)

 
bpy.ops.object.select_all(action='DESELECT')
print('Speed {:} NumberOfFrames{:} fps{:}'.format(speed,number_of_frames,l_fps)) 
print('copy_scale {:} '.format(copy_scale)) 

#done
